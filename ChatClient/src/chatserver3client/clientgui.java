/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
//Person Connecting to the Chat
package chatserver3client;

import java.awt.Toolkit;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.BufferedWriter;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.net.Socket;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

/**
 *
 * @author donal Refer to the ChatClient.java for comments and code explanation
 * too lazy to type again -Donald Shan
 */
public class clientgui extends javax.swing.JFrame implements KeyListener, Runnable {

    JTextArea n = new JTextArea();
    final JFileChooser fc = new JFileChooser();
    static Socket sckt;
    static DataInputStream dtinpt;
    File file;
    BufferedWriter writer;
    static String port;
    static boolean connection = true;
    static String username;
    static DataOutputStream dtotpt;

    public void run() {
        while (true) {
            DateFormat dateFormat = new SimpleDateFormat("HH:mm:ss");
            Date date = new Date();
            time.setText(dateFormat.format(date));
            
          
          

        }
    }

    public static void appendStrToFile(String fileName,
            String str) throws IOException {
        BufferedWriter writer = new BufferedWriter(new FileWriter(fileName, true));
        writer.newLine();   //Add new line
        writer.write(str);
        writer.close();
    }

    public clientgui() {

        initComponents();

        this.setLocationRelativeTo(null);

        username = JOptionPane.showInputDialog("Enter a Username");
        Thread t = new Thread(this);
        t.start();
        message.addKeyListener(this);
        jLabel1.setText(username + " Chat Session");
        chat.setText("***Chat Software V3***");

        //   chat.setText("Attempting to connect to " + ip + ":" + port);
    }



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        message = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        chat = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        send = new javax.swing.JButton();
        time = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Client Side Chat");

        chat.setEditable(false);
        chat.setColumns(20);
        chat.setFont(new java.awt.Font("Dialog", 0, 18)); // NOI18N
        chat.setRows(5);
        chat.setFocusTraversalPolicyProvider(true);
        jScrollPane1.setViewportView(chat);

        jLabel2.setText("Message");

        send.setText("☺");
        send.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendActionPerformed(evt);
            }
        });

        time.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        time.setText("time");

        jButton1.setText("Save");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Exit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(message)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(send)
                        .addGap(11, 11, 11))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(time)
                        .addGap(44, 44, 44)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(time)
                    .addComponent(jLabel1)
                    .addComponent(jButton1)
                    .addComponent(jButton2))
                .addGap(8, 8, 8)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(send)
                    .addComponent(message, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendActionPerformed
        // TODO add your handling code here:
         message.setText(message.getText().replaceAll("<happy>", "☺"));
         message.setText(message.getText().replaceAll("<sad>", "☹"));
         message.setText(message.getText().replaceAll("<heart>", "❤"));
         message.setText(message.getText().replaceAll("<wrong>", "✕"));
          message.setText(message.getText().replaceAll("<correct>", "✓"));
              Toolkit.getDefaultToolkit().beep();

            if (message.getText().equals("")) {
                chat.setText(chat.getText() + "\n" + "***You May Not Send a Blank Message***");
            } else {
                try {

                    String msgout = "";
                    msgout = message.getText().trim();

                    chat.setText(chat.getText() + "\n " + username + ": " +  msgout);

                    dtotpt.writeUTF(username + ": " +  msgout);
                    message.setText("");
                    appendStrToFile("C:\\Users\\donal\\OneDrive\\Desktop\\Oxbridge\\ServerLogs.txt", chat.getText() + "\n" + username + ": " +  msgout);
                    //message.setText(null);
                } catch (IOException ex) {
                    chat.setText(chat.getText() + "\n***Connection Lost/Timed Out***");
                    
                }

            }
         
    }//GEN-LAST:event_sendActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {
  
            saveFile();
            JOptionPane.showMessageDialog(this, "The conversation has been saved");
        } catch (IOException ex) {

            JOptionPane.showMessageDialog(this, "An Error has occured the conversation did not save");

        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        if(connection==true){
           chat.setText(chat.getText() + "\nChat Session Disconnected");
        }
        else{
            chat.setText(chat.getText() + "\nCHAT IS ALREADY CLOSING");  
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    public void saveFile() throws IOException {
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            file = fc.getSelectedFile();

            String path = file.getAbsolutePath();
            appendStrToFile(path, chat.getText());
        }
    }
//Smile ☺

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws InterruptedException {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(clientgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(clientgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(clientgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clientgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new clientgui().setVisible(true);
            }
        });
        try {

            String ip = JOptionPane.showInputDialog("What is the IP?");
            sckt = new Socket(ip, 1201);
            chat.setText(chat.getText() + "\n***Connection Established***");
           
            dtinpt = new DataInputStream(sckt.getInputStream());
            dtotpt = new DataOutputStream(sckt.getOutputStream());
            String msgin = "";

            while (!msgin.equals("X3")) {
                msgin = dtinpt.readUTF();
                chat.setText(chat.getText() + "\n" + msgin);

                chat.setCaretPosition(chat.getDocument().getLength());
            }
        } catch (IOException e) {
            chat.setText(chat.getText() + "\n***Connection Lost/Timed Out***\nProgram ENDING in 5 Seconds");
            Thread.sleep(5000);
            System.exit(0);
        }

    }

    public void keyTyped(KeyEvent e) {
    }

    public void keyReleased(KeyEvent e) {
    }

    public void keyPressed(KeyEvent e) {
        int key = e.getKeyCode();
        if (key == KeyEvent.VK_ENTER) {
                  message.setText(message.getText().replaceAll("<happy>", "☺"));
         message.setText(message.getText().replaceAll("<sad>", "☹"));
         message.setText(message.getText().replaceAll("<heart>", "❤"));
         message.setText(message.getText().replaceAll("<wrong>", "✕"));
          message.setText(message.getText().replaceAll("<correct>", "✓"));
            Toolkit.getDefaultToolkit().beep();

            if (message.getText().equals("")) {
                chat.setText(chat.getText() + "\n" + "***You May Not Send a Blank Message***");
            } else {
                try {

                    String msgout = "";

                    msgout = message.getText().trim();

                    chat.setText(chat.getText() + "\n" + username + ": " +  msgout);

                    dtotpt.writeUTF(username + ": " +  msgout);
                    appendStrToFile("C:\\Users\\donal\\OneDrive\\Desktop\\Oxbridge\\Conversation.txt", chat.getText() + "\n" + username + ": ");
                    message.setText("");
                    //message.setText(null);
                } catch (IOException ex) {
                    
                }

            }
            message.setText(null);
        }

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private static javax.swing.JTextArea chat;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField message;
    private javax.swing.JButton send;
    private javax.swing.JLabel time;
    // End of variables declaration//GEN-END:variables

}
